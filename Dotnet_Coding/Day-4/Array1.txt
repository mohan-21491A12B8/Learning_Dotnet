C# Program Explanation

"Array Operations Example"

This document explains a C# program that demonstrates various operations on arrays, including clearing, copying, sorting, resizing, and searching.

Code:

using System;

class Array1
{
    public static void Main()
    {
        int[] numbers = { 1, 2, 3, 4, 5, 3, 2, 1, 5, 6 }; // Initialize an array of integers
        Console.WriteLine("Original Array: " + string.Join(",", numbers)); // Print the original array

        Array.Clear(numbers, 1, 3); // Clear 3 elements starting from index 1
        Console.WriteLine("After clear: " + string.Join(",", numbers)); // Print the array after clearing

        int[] copiedArray = new int[9]; // Create a new array for copying
        Array.Copy(numbers, copiedArray, 3); // Copy the first 3 elements from numbers to copiedArray
        Console.WriteLine("Copied array: " + string.Join(",", copiedArray)); // Print the copied array

        int[] destinationArray = new int[10]; // Create a destination array
        numbers.CopyTo(destinationArray, 0); // Copy numbers to destinationArray starting at index 0
        Console.WriteLine("Destination Array: " + string.Join(",", destinationArray)); // Print the destination array

        Console.WriteLine(Array.IndexOf(numbers, 5)); // Find the first occurrence index of 5 in numbers
        Console.WriteLine(Array.LastIndexOf(numbers, 5)); // Find the last occurrence index of 5 in numbers

        Array.Sort(numbers); // Sort the numbers array
        Console.WriteLine("Sorted Array: " + string.Join(",", numbers)); // Print the sorted array

        Array.Resize(ref numbers, 20); // Resize the numbers array to 20 elements
        Console.WriteLine("Resized Array: " + string.Join(",", numbers)); // Print the resized array

        Console.WriteLine("First element greater than 4: " + Array.Find(numbers, element => element > 4)); // Find the first element greater than 4
        Console.WriteLine("All elements greater than 4: " + string.Join(",", Array.FindAll(numbers, element => element > 4))); // Find all elements greater than 4

        Console.WriteLine("Elements in the array:");
        Array.ForEach(numbers, element => Console.WriteLine(element)); // Print each element in the array

        Console.WriteLine("Does 5 exist in the array: " + Array.Exists(numbers, element => element >= 0)); // Check if any element is greater than or equal to 0

        int[] clonedArray = (int[])numbers.Clone(); // Clone the numbers array
        Console.WriteLine("Cloned Array: " + string.Join(",", clonedArray)); // Print the cloned array
    }
}

Explanation:

1. `using System;`
   - This line is a directive that tells the compiler to include the System namespace. The System namespace contains fundamental classes and base classes that define commonly used types, such as strings, dates, and console input/output.

2. `class Array1`
   - This line defines a new class named `Array1`. In C#, every program must have at least one class. A class is a blueprint for creating objects and can contain methods, properties, and other members.

3. `public static void Main()`
   - This line defines the `Main` method, which is the entry point of the program. When the program is executed, the code inside the `Main` method is the first to run.

4. `int[] numbers = { 1, 2, 3, 4, 5, 3, 2, 1, 5, 6 };`
   - This line initializes an array of integers named `numbers`.

5. `Console.WriteLine("Original Array: " + string.Join(",", numbers));`
   - This line prints the original array by joining its elements with a comma.

6. `Array.Clear(numbers, 1, 3);`
   - This line clears 3 elements starting from index 1 in the `numbers` array, setting them to their default value (0 for integers).

7. `Console.WriteLine("After clear: " + string.Join(",", numbers));`
   - This line prints the array after clearing the specified elements.

8. `int[] copiedArray = new int[9];`
   - This line creates a new integer array named `copiedArray` with a size of 9.

9. `Array.Copy(numbers, copiedArray, 3);`
   - This line copies the first 3 elements from the `numbers` array to the `copiedArray`.

10. `Console.WriteLine("Copied array: " + string.Join(",", copiedArray));`
   - This line prints the contents of the `copiedArray`.

11. `int[] destinationArray = new int[10];`
   - This line creates a new integer array named `destinationArray` with a size of 10.

12. `numbers.CopyTo(destinationArray, 0);`
   - This line copies all elements from the `numbers` array to the `destinationArray`, starting at index 0.

13. `Console.WriteLine("Destination Array: " + string.Join(",", destinationArray));`
   - This line prints the contents of the `destinationArray`.

14. `Console.WriteLine(Array.IndexOf(numbers, 5));`
   - This line finds and prints the index of the first occurrence of the value 5 in the `numbers` array.

15. `Console.WriteLine(Array.LastIndexOf(numbers, 5));`
   - This line finds and prints the index of the last occurrence of the value 5 in the `numbers` array.

16. `Array.Sort(numbers);`
   - This line sorts the `numbers` array in ascending order.

17. `Console.WriteLine("Sorted Array: " + string.Join(",", numbers));`
   - This line prints the sorted array.

18. `Array.Resize(ref numbers, 20);`
   - This line resizes the `numbers` array to hold 20 elements.

19. `Console.WriteLine("Resized Array: " + string.Join(",", numbers));`
   - This line prints the resized array, which may contain default values for the new elements.

20. `Console.WriteLine("First element greater than 4: " + Array.Find(numbers, element => element > 4));`
   - This line finds and prints the first element in the `numbers` array that is greater than 4.

21. `Console.WriteLine("All elements greater than 4: " + string.Join(",", Array.FindAll(numbers, element => element > 4)));`
   - This line finds and prints all elements in the `numbers` array that are greater than 4.

22. `Console.WriteLine("Elements in the array:");`
   - This line prints a header for the following output.

23. `Array.ForEach(numbers, element => Console.WriteLine(element));`
   - This line iterates through each element in the `numbers` array and prints it.

24. `Console.WriteLine("Does 5 exist in the array: " + Array.Exists(numbers, element => element >= 0));`
   - This line checks if any element in the `numbers` array is greater than or equal to 0 and prints the result.

25. `int[] clonedArray = (int[])numbers.Clone();`
   - This line creates a clone of the `numbers` array.

26. `Console.WriteLine("Cloned Array: " + string.Join(",", clonedArray));`
   - This line prints the contents of the cloned array.

Summary:
This C# program demonstrates various operations on arrays, including clearing elements, copying, sorting, resizing, and searching for elements. The program initializes an array, performs multiple operations, and outputs the results at each step, showcasing the flexibility and functionality of arrays in C#.