C# Program Explanation

"Using Multiple Threads in C#"

This document explains a C# program that demonstrates the use of multiple threads to execute different methods concurrently.

Code:

using System;
using System.Threading;

class Test4
{
    // Method Sum that prints "welcome" after a delay when i is 3
    static void Sum()
    {
        for (int i = 0; i < 5; i++)
        {
            if (i == 3)
            {
                Thread.Sleep(1000); // Pause for 1 second
                Console.WriteLine("welcome"); // Print "welcome" when i is 3
            }
        }
    }

    // Method Add that prints "hi" five times
    static void Add()
    {
        for (int i = 0; i < 5; i++)
        {
            Console.WriteLine("hi"); // Print "hi" to the console
        }
    }

    // Main method - entry point of the program
    static void Main()
    {
        Thread t = new Thread(Sum); // Create a new thread that runs the Sum method
        Thread t1 = new Thread(Add); // Create another thread that runs the Add method
        t.Start(); // Start the first thread
        t1.Start(); // Start the second thread
        t1.Join(); // Wait for the second thread to finish before continuing
    }
}

Explanation:

1. `using System;`
   - This line includes the System namespace, which contains fundamental classes and base classes for commonly used types.

2. `using System.Threading;`
   - This line includes the System.Threading namespace, which provides classes and interfaces that enable multithreaded programming.

3. `class Test4`
   - This line defines a class named `Test4`.

4. `static void Sum()`
   - This line defines a static method named `Sum`. It does not return any value.

5. `for (int i = 0; i < 5; i++)`
   - This line starts a for loop that iterates from 0 to 4 (inclusive), resulting in 5 iterations.

6. `if (i == 3)`
   - This line checks if the loop variable `i` is equal to 3.

7. `Thread.Sleep(1000);`
   - This line pauses the thread for 1 second when `i` is 3.

8. `Console.WriteLine("welcome");`
   - This line prints "welcome" to the console after the pause.

9. `static void Add()`
   - This line defines another static method named `Add`.

10. `Console.WriteLine("hi");`
    - This line prints "hi" to the console during each iteration of the loop in the `Add` method.

11. `static void Main()`
    - This line defines the `Main` method, which is the entry point of the program.

12. `Thread t = new Thread(Sum);`
    - This line creates a new thread `t` that will execute the `Sum` method.

13. `Thread t1 = new Thread(Add);`
    - This line creates another new thread `t1` that will execute the `Add` method.

14. `t.Start();`
    - This line starts the execution of the first thread `t`.

15. `t1.Start();`
    - This line starts the execution of the second thread `t1`.

16. `t1.Join();`
    - This line makes the main thread wait until the second thread `t1` has finished executing before continuing.

Summary:
This C# program demonstrates the creation and execution of multiple threads that perform different tasks concurrently. The `Sum` method prints "welcome" after a 1-second delay when the loop variable reaches 3, while the `Add` method prints "hi" five times. The main thread starts both threads and waits for the second thread to complete using the `Join` method.

When executed, the output will be:
hi 
hi 
hi 
hi 
hi 
welcome

The output will show "hi" printed five times by the `Add` method, and "welcome" printed after a 1-second delay when the `Sum` method reaches the condition where `i` is 3.